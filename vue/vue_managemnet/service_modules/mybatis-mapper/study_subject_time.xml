<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="study_subject_time">
  <sql id="sql_where-study_subject_time">
    <trim prefix="WHERE" prefixOverrides="AND|OR">
      <if test="searchFilter.idx               != undefined AND searchFilter.idx               != ''"> AND A.idx               = #{searchFilter.idx}               </if>
      <if test="searchFilter.studySubjectIdx   != undefined AND searchFilter.studySubjectIdx   != ''"> AND A.study_subject_idx = #{searchFilter.studySubjectIdx}   </if>
      <if test="searchFilter.seriesCode               != undefined AND searchFilter.seriesCode               != ''"> AND C.series_code = #{searchFilter.seriesCode} </if>
      <choose>
        <when test="searchFilter.startTime.s         != '' and searchFilter.startTime.e         != ''">AND start_time        between DATE_FORMAT(#{searchFilter.startTime.s},         '%Y-%m-%d') AND DATE_ADD(DATE_FORMAT(#{searchFilter.startTime.e},         '%Y-%m-%d'), INTERVAL 1 DAY) </when>
        <when test="searchFilter.startTime.s         != '' and searchFilter.startTime.e         == ''">AND start_time        &gt;    DATE_FORMAT(#{searchFilter.startTime.s},         '%Y-%m-%d')  </when>
        <when test="searchFilter.startTime.s         == '' and searchFilter.startTime.e         != ''">AND start_time        &lt;                                                                     DATE_ADD(DATE_FORMAT(#{searchFilter.startTime.e},         '%Y-%m-%d'), INTERVAL 1 DAY) </when>
      </choose>
      <choose>
        <when test="searchFilter.endTime.s           != '' and searchFilter.endTime.e           != ''">AND end_time          between DATE_FORMAT(#{searchFilter.endTime.s},           '%Y-%m-%d') AND DATE_ADD(DATE_FORMAT(#{searchFilter.endTime.e},           '%Y-%m-%d'), INTERVAL 1 DAY) </when>
        <when test="searchFilter.endTime.s           != '' and searchFilter.endTime.e           == ''">AND end_time          &gt;    DATE_FORMAT(#{searchFilter.endTime.s},           '%Y-%m-%d')  </when>
        <when test="searchFilter.endTime.s           == '' and searchFilter.endTime.e           != ''">AND end_time          &lt;                                                                     DATE_ADD(DATE_FORMAT(#{searchFilter.endTime.e},           '%Y-%m-%d'), INTERVAL 1 DAY) </when>
      </choose>
      <choose>
        <when test="searchFilter.registerDate.s      != '' and searchFilter.registerDate.e      != ''">AND register_date     between DATE_FORMAT(#{searchFilter.registerDate.s},      '%Y-%m-%d') AND DATE_ADD(DATE_FORMAT(#{searchFilter.registerDate.e},      '%Y-%m-%d'), INTERVAL 1 DAY) </when>
        <when test="searchFilter.registerDate.s      != '' and searchFilter.registerDate.e      == ''">AND register_date     &gt;    DATE_FORMAT(#{searchFilter.registerDate.s},      '%Y-%m-%d')  </when>
        <when test="searchFilter.registerDate.s      == '' and searchFilter.registerDate.e      != ''">AND register_date     &lt;                                                                     DATE_ADD(DATE_FORMAT(#{searchFilter.registerDate.e},      '%Y-%m-%d'), INTERVAL 1 DAY) </when>
      </choose>
    </trim>
  </sql>

  <select id="select-list">
    SELECT 
      COUNT(A.idx) OVER() AS count,
      A.idx               AS idx,
      A.study_subject_idx AS studySubjectIdx,
      A.start_time        AS startTime,
      A.end_time          AS endTime,
      A.register_date     AS registerDate,
    B.subject_name AS subjectName,
    B.subject_color AS subjectColor
    FROM study_subject_time A 
    INNER JOIN study_subject_info B ON B.idx = A.study_subject_idx AND B.user_idx = #{searchFilter.userIdx}
    <include refid="sql_where-study_subject_time" />
  </select>

  <select id="select-alltime">
    SELECT
    SEC_TO_TIME(sum(TIME_TO_SEC(A.end_time) - TIME_TO_SEC(A.start_time))) AS diff_time
    FROM
    study_subject_time A
    INNER JOIN study_subject_info B ON B.idx = A.study_subject_idx AND B.user_idx = #{searchFilter.userIdx}
  </select>

  <select id="select-rank">
    SELECT
    SEC_TO_TIME(sum(TIME_TO_SEC(A.end_time) - TIME_TO_SEC(A.start_time))) AS diff_time,
    C.nickname
    FROM 
    study_subject_time A
    LEFT JOIN study_subject_info B ON B.idx = A.study_subject_idx
    LEFT JOIN user_info C ON C.idx = B.user_idx
    <include refid="sql_where-study_subject_time" />
    GROUP BY B.user_idx
    ORDER BY diff_time DESC
    LIMIT 5
  </select>

  <select id="select-rank-percent">
    SELECT
    SEC_TO_TIME(sum(TIME_TO_SEC(A.end_time) - TIME_TO_SEC(A.start_time))) AS diff_time,
    C.idx,
    CAST(ROUND(PERCENT_RANK() OVER(ORDER BY diff_time DESC), 2) * 100 AS SIGNED integer) AS percent
    FROM 
    study_subject_time A
    LEFT JOIN study_subject_info B ON B.idx = A.study_subject_idx
    LEFT JOIN user_info C ON C.idx = B.user_idx
    <include refid="sql_where-study_subject_time" />
    GROUP BY B.user_idx
    ORDER BY diff_time DESC
  </select>

  <select id="select-rank-group">
    SELECT
    SEC_TO_TIME(sum(TIME_TO_SEC(A.end_time) - TIME_TO_SEC(A.start_time))) AS diff_time,
    C.nickname
    FROM 
    study_subject_time A
    LEFT JOIN study_subject_info B ON B.idx = A.study_subject_idx
    LEFT JOIN user_info C ON C.idx = B.user_idx
    WHERE
    <choose>
      <when test="searchFilter.idxList != undefined and searchFilter.idxList != ''">
        <foreach collection="searchFilter.idxList" item="idx"  open="(" close=")" separator="OR">
          C.idx = #{idx}
        </foreach>
      </when>
      <otherwise>
        C.idx = '-1'
      </otherwise>
    </choose>
    GROUP BY B.user_idx
    ORDER BY diff_time DESC
    LIMIT 5
  </select>

  <insert id="insert-object">
    insert into study_subject_time (
      study_subject_idx 
      , start_time 
      , end_time 
      <if test="insertData.registerDate      != undefined and insertData.registerDate     != ''">, register_date    </if>
    ) values (
      #{insertData.studySubjectIdx}
      , #{insertData.startTime}
      , #{insertData.endTime}
      <if test="insertData.registerDate      != undefined and insertData.registerDate     != ''">, #{insertData.registerDate}      </if>
    )
  </insert>

  <update id="update-object">
    update study_subject_time A
    <trim prefix="SET" prefixOverrides=",">
      <if test="updateData.studySubjectIdx   != undefined and updateData.studySubjectIdx  != ''">, study_subject_idx = #{updateData.studySubjectIdx}   </if>
      <if test="updateData.startTime         != undefined and updateData.startTime        != ''">, start_time        = #{updateData.startTime}         </if>
      <if test="updateData.endTime           != undefined and updateData.endTime          != ''">, end_time          = #{updateData.endTime}           </if>
      <if test="updateData.registerDate      != undefined and updateData.registerDate     != ''">, register_date     = #{updateData.registerDate}      </if>
    </trim>
    <include refid="sql_where-study_subject_time" />
  </update>

  <delete id="delete-object">
    delete from study_subject_time
    where idx = #{searchFilter.idx}
  </delete>

</mapper>
